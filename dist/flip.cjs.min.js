"use strict";class Utils{static snakeToCamel(t){return t.replace(/(-\w)/g,t=>t[1].toUpperCase())}static nextFrame(t){requestAnimationFrame(()=>requestAnimationFrame(t))}}class ElementHelper{constructor(t){this.element=t}cleanTransition(){this.element.style.transition=""}setStyle(t,e){this.element.style[Utils.snakeToCamel(t)]=e}static getStyle(t,e){return window.getComputedStyle(t).getPropertyValue(e)}static getStyles(t,e){return e.map(e=>this.getStyle(t,e))}static measure(t,e){return{rect:t.getBoundingClientRect(),opacity:ElementHelper.getStyle(t,"opacity"),others:ElementHelper.getStyles(t,e)}}static getTransition(t,e,i){return t.map(t=>`${t} ${e} ${i}`).join(",")}}class Flipper{constructor(t,e,i){this.element=t,this.helper=new ElementHelper(t),this.toClass=e,this.otherPropsToFlip=i?[].concat(i):[]}firstLastInvert(){const t=ElementHelper.measure(this.element,this.otherPropsToFlip);this.element.classList.add(this.toClass);const e=ElementHelper.measure(this.element,this.otherPropsToFlip);this.invert=this.invert(t,e,this.otherPropsToFlip)}play(t,e){const i=["transform"];this.invert.hasOpacityChanged&&i.push("opacity"),Flipper.forEachPropThatChanged(this.otherPropsToFlip,this.invert,t=>i.push(t)),this.element.style.transition=ElementHelper.getTransition(i,t,e),this.element.style.transform="",this.invert.hasOpacityChanged&&(this.element.style.opacity=""),Flipper.forEachPropThatChanged(this.otherPropsToFlip,this.invert,t=>this.helper.setStyle(t,""))}cleanTransition(){this.helper.cleanTransition()}invert(t,e,i){const s={translateX:(t.rect.left+t.rect.right)/2-(e.rect.left+e.rect.right)/2,translateY:(t.rect.top+t.rect.bottom)/2-(e.rect.top+e.rect.bottom)/2,scaleX:t.rect.width/e.rect.width,scaleY:t.rect.height/e.rect.height,hasOpacityChanged:t.opacity!==e.opacity,opacity:t.opacity,hasOtherPropsToFlipChanged:t.others.map((t,i)=>t!==e.others[i]),otherPropsToFlip:t.others};return this.element.style.transform=`translate(${s.translateX}px,${s.translateY}px) scale(${s.scaleX},${s.scaleY})`,s.hasOpacityChanged&&(this.element.style.opacity=s.opacity),Flipper.forEachPropThatChanged(i,s,(t,e)=>this.helper.setStyle(this.element,t,s.otherPropsToFlip[e])),s}static forEachPropThatChanged(t,e,i){t.forEach((t,s)=>{e.hasOtherPropsToFlipChanged[s]&&i(t,s)})}static transitionEndCallback(t,e){return()=>{t.element.removeEventListener("transitionend",Flipper.transitionEndCallback),t.cleanTransition(),e&&e()}}}class Flip{constructor(){this.flippers=[],this.withTransition()}withTransition(t="375ms",e="cubic-bezier(0.4, 0.0, 0.2, 1)"){return this.transitionDuration=t||this.transitionDuration,this.transitionTimingFunction=e||this.transitionTimingFunction,this}withClass(t,e,i=[]){if(!t)throw new Error("element should be defined");if(!e)throw new Error("toClass should be defined");return this.flippers.push(new Flipper(t,e,i)),this}go(){return new Promise(t=>{this.flippers.forEach(t=>t.firstLastInvert()),Utils.nextFrame(()=>{this.flippers.forEach((e,i)=>{e.element.addEventListener("transitionend",Flipper.transitionEndCallback(e,i?void 0:t)),e.play(this.transitionDuration,this.transitionTimingFunction)})}),this.flippers.length||t()})}}module.exports=Flip;
